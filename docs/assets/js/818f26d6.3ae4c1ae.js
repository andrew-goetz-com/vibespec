"use strict";(self.webpackChunkvibespec_docs=self.webpackChunkvibespec_docs||[]).push([[7826],{6316:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"schemas/layout","title":"Layout","description":"Stack-agnostic layout primitives: stack/cluster/grid/frame with constraints, alignment, gaps, and responsive overrides.","source":"@site/docs/schemas/layout.schema.mdx","sourceDirName":"schemas","slug":"/schemas/layout","permalink":"/schemas/layout","draft":false,"unlisted":false,"editUrl":"https://github.com/andrew-goetz-com/vibespec/edit/main/website/docs/schemas/layout.schema.mdx","tags":[{"inline":true,"label":"schema","permalink":"/tags/schema"},{"inline":true,"label":"v0.2.0","permalink":"/tags/v-0-2-0"}],"version":"current","frontMatter":{"id":"layout","title":"Layout","description":"Stack-agnostic layout primitives: stack/cluster/grid/frame with constraints, alignment, gaps, and responsive overrides.","slug":"/schemas/layout","tags":["schema","v0.2.0"]},"sidebar":"sidebar","previous":{"title":"Interaction","permalink":"/schemas/interaction"},"next":{"title":"Manifest","permalink":"/schemas/manifest"}}');var i=t(4848),r=t(8453);const o={id:"layout",title:"Layout",description:"Stack-agnostic layout primitives: stack/cluster/grid/frame with constraints, alignment, gaps, and responsive overrides.",slug:"/schemas/layout",tags:["schema","v0.2.0"]},a=void 0,d={},c=[];function f(n){const e={a:"a",code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Stack-agnostic layout primitives: stack/cluster/grid/frame with constraints, alignment, gaps, and responsive overrides."}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Field"}),(0,i.jsx)(e.th,{children:"Value"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"$id"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"https://vibespec.vibecodeunited.com/schema/layout.schema.json"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"vibespecVersion"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"0.2.0"})})]})]})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/andrew-goetz-com/vibespec/blob/HEAD/schemas/layout.schema.json",children:"View raw schema on GitHub"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "$id": "https://vibespec.vibecodeunited.com/schema/layout.schema.json",\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "title": "Layout",\n  "vibespecVersion": "0.2.0",\n  "description": "Stack-agnostic layout primitives: stack/cluster/grid/frame with constraints, alignment, gaps, and responsive overrides.",\n  "type": "object",\n  "allOf": [\n    {\n      "$ref": "#/$defs/LayoutNode"\n    }\n  ],\n  "$defs": {\n    "TokenRef": {\n      "type": "string",\n      "pattern": "^\\\\{[a-zA-Z0-9_.-]+\\\\}$",\n      "description": "Reference to a design token path, e.g., {space.3} or {breakpoints.md}"\n    },\n    "Dimension": {\n      "description": "Numeric (interpreted as px), string (e.g., \'1fr\',\'auto\',\'min-content\'), or token ref.",\n      "oneOf": [\n        {\n          "type": "number"\n        },\n        {\n          "type": "string"\n        },\n        {\n          "$ref": "#/$defs/TokenRef"\n        }\n      ]\n    },\n    "Gap": {\n      "oneOf": [\n        {\n          "$ref": "#/$defs/Dimension"\n        },\n        {\n          "type": "object",\n          "properties": {\n            "row": {\n              "$ref": "#/$defs/Dimension"\n            },\n            "column": {\n              "$ref": "#/$defs/Dimension"\n            }\n          },\n          "additionalProperties": false\n        }\n      ]\n    },\n    "AlignMain": {\n      "type": "string",\n      "enum": [\n        "start",\n        "center",\n        "end",\n        "space-between",\n        "space-around",\n        "space-evenly"\n      ]\n    },\n    "AlignCross": {\n      "type": "string",\n      "enum": [\n        "start",\n        "center",\n        "end",\n        "stretch",\n        "baseline"\n      ]\n    },\n    "Position": {\n      "type": "string",\n      "enum": [\n        "relative",\n        "absolute",\n        "fixed",\n        "sticky"\n      ]\n    },\n    "Constraints": {\n      "type": "object",\n      "properties": {\n        "width": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "height": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "minWidth": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "maxWidth": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "minHeight": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "maxHeight": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "overflow": {\n          "type": "string",\n          "enum": [\n            "visible",\n            "hidden",\n            "clip",\n            "scroll",\n            "auto"\n          ]\n        },\n        "padding": {\n          "$ref": "#/$defs/Gap"\n        },\n        "margin": {\n          "$ref": "#/$defs/Gap"\n        }\n      },\n      "additionalProperties": false\n    },\n    "Responsive": {\n      "type": "object",\n      "description": "Breakpoint/environment overrides keyed by names (e.g., sm, md, dark, reducedMotion).",\n      "additionalProperties": {\n        "allOf": [\n          {\n            "$ref": "#/$defs/LayoutNode"\n          }\n        ]\n      }\n    },\n    "StackLayout": {\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "properties": {\n        "type": {\n          "const": "stack"\n        },\n        "direction": {\n          "type": "string",\n          "enum": [\n            "row",\n            "column"\n          ]\n        },\n        "gap": {\n          "$ref": "#/$defs/Gap"\n        },\n        "align": {\n          "$ref": "#/$defs/AlignCross"\n        },\n        "justify": {\n          "$ref": "#/$defs/AlignMain"\n        },\n        "wrap": {\n          "type": "boolean",\n          "default": false\n        },\n        "constraints": {\n          "$ref": "#/$defs/Constraints"\n        }\n      },\n      "additionalProperties": false\n    },\n    "ClusterLayout": {\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "properties": {\n        "type": {\n          "const": "cluster"\n        },\n        "gap": {\n          "$ref": "#/$defs/Gap"\n        },\n        "align": {\n          "$ref": "#/$defs/AlignCross"\n        },\n        "justify": {\n          "$ref": "#/$defs/AlignMain"\n        },\n        "minItemWidth": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "constraints": {\n          "$ref": "#/$defs/Constraints"\n        }\n      },\n      "additionalProperties": false\n    },\n    "GridLayout": {\n      "type": "object",\n      "required": [\n        "type",\n        "columns"\n      ],\n      "properties": {\n        "type": {\n          "const": "grid"\n        },\n        "columns": {\n          "description": "Grid column tracks (CSS-like strings such as \'1fr\', \'auto\', \'minmax(200px,1fr)\') or token refs.",\n          "type": "array",\n          "items": {\n            "oneOf": [\n              {\n                "type": "string"\n              },\n              {\n                "$ref": "#/$defs/TokenRef"\n              }\n            ]\n          }\n        },\n        "rows": {\n          "type": "array",\n          "items": {\n            "oneOf": [\n              {\n                "type": "string"\n              },\n              {\n                "$ref": "#/$defs/TokenRef"\n              }\n            ]\n          }\n        },\n        "areas": {\n          "description": "Grid template areas as rows of quoted area names (e.g., [\'\\"header header\\"\', \'\\"sidebar main\\"\']).",\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "columnGap": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "rowGap": {\n          "$ref": "#/$defs/Dimension"\n        },\n        "alignItems": {\n          "$ref": "#/$defs/AlignCross"\n        },\n        "justifyItems": {\n          "$ref": "#/$defs/AlignCross"\n        },\n        "alignContent": {\n          "$ref": "#/$defs/AlignCross"\n        },\n        "justifyContent": {\n          "$ref": "#/$defs/AlignCross"\n        },\n        "autoFlow": {\n          "type": "string",\n          "enum": [\n            "row",\n            "column",\n            "dense",\n            "row dense",\n            "column dense"\n          ]\n        },\n        "constraints": {\n          "$ref": "#/$defs/Constraints"\n        }\n      },\n      "additionalProperties": false\n    },\n    "FrameLayout": {\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "properties": {\n        "type": {\n          "const": "frame"\n        },\n        "position": {\n          "$ref": "#/$defs/Position"\n        },\n        "inset": {\n          "type": "object",\n          "properties": {\n            "top": {\n              "$ref": "#/$defs/Dimension"\n            },\n            "right": {\n              "$ref": "#/$defs/Dimension"\n            },\n            "bottom": {\n              "$ref": "#/$defs/Dimension"\n            },\n            "left": {\n              "$ref": "#/$defs/Dimension"\n            }\n          },\n          "additionalProperties": false\n        },\n        "zIndex": {\n          "oneOf": [\n            {\n              "type": "number"\n            },\n            {\n              "$ref": "#/$defs/TokenRef"\n            }\n          ]\n        },\n        "pointerEvents": {\n          "type": "string",\n          "enum": [\n            "auto",\n            "none"\n          ]\n        },\n        "constraints": {\n          "$ref": "#/$defs/Constraints"\n        }\n      },\n      "additionalProperties": false\n    },\n    "LayoutNode": {\n      "oneOf": [\n        {\n          "$ref": "#/$defs/StackLayout"\n        },\n        {\n          "$ref": "#/$defs/ClusterLayout"\n        },\n        {\n          "$ref": "#/$defs/GridLayout"\n        },\n        {\n          "$ref": "#/$defs/FrameLayout"\n        }\n      ]\n    }\n  },\n  "additionalProperties": false\n}\n'})})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(f,{...n})}):f(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);