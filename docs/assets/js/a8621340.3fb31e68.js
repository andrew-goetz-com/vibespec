"use strict";(self.webpackChunkvibespec_docs=self.webpackChunkvibespec_docs||[]).push([[6304],{3061:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"schemas/interaction","title":"Interaction","description":"Stack-agnostic interaction model: events, guards, typed actions, keyboard and gesture mappings, and optional async state hooks.","source":"@site/docs/schemas/interaction.schema.mdx","sourceDirName":"schemas","slug":"/schemas/interaction","permalink":"/schemas/interaction","draft":false,"unlisted":false,"editUrl":"https://github.com/andrew-goetz-com/vibespec/edit/main/website/docs/schemas/interaction.schema.mdx","tags":[{"inline":true,"label":"schema","permalink":"/tags/schema"},{"inline":true,"label":"v0.2.0","permalink":"/tags/v-0-2-0"}],"version":"current","frontMatter":{"id":"interaction","title":"Interaction","description":"Stack-agnostic interaction model: events, guards, typed actions, keyboard and gesture mappings, and optional async state hooks.","slug":"/schemas/interaction","tags":["schema","v0.2.0"]},"sidebar":"sidebar","previous":{"title":"Schemas","permalink":"/schemas"},"next":{"title":"Layout","permalink":"/schemas/layout"}}');var o=t(4848),s=t(8453);const a={id:"interaction",title:"Interaction",description:"Stack-agnostic interaction model: events, guards, typed actions, keyboard and gesture mappings, and optional async state hooks.",slug:"/schemas/interaction",tags:["schema","v0.2.0"]},r=void 0,c={},d=[];function p(n){const e={a:"a",code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Stack-agnostic interaction model: events, guards, typed actions, keyboard and gesture mappings, and optional async state hooks."}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Field"}),(0,o.jsx)(e.th,{children:"Value"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"$id"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:"https://vibespec.vibecodeunited.com/schema/interaction.schema.json"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"vibespecVersion"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:"0.2.0"})})]})]})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://github.com/andrew-goetz-com/vibespec/blob/HEAD/schemas/interaction.schema.json",children:"View raw schema on GitHub"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "$id": "https://vibespec.vibecodeunited.com/schema/interaction.schema.json",\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "title": "Interaction",\n  "vibespecVersion": "0.2.0",\n  "description": "Stack-agnostic interaction model: events, guards, typed actions, keyboard and gesture mappings, and optional async state hooks.",\n  "type": "object",\n  "properties": {\n    "events": {\n      "type": "array",\n      "items": {\n        "$ref": "#/$defs/EventBinding"\n      },\n      "default": []\n    },\n    "keyboard": {\n      "$ref": "#/$defs/KeyboardMap"\n    },\n    "gestures": {\n      "$ref": "#/$defs/GestureMap"\n    },\n    "async": {\n      "type": "object",\n      "description": "Optional async lifecycle hooks applied when actions are async.",\n      "properties": {\n        "onLoading": {\n          "$ref": "#/$defs/ActionList"\n        },\n        "onError": {\n          "$ref": "#/$defs/ActionList"\n        },\n        "onSuccess": {\n          "$ref": "#/$defs/ActionList"\n        }\n      },\n      "additionalProperties": false\n    },\n    "stateMachine": {\n      "$ref": "#/$defs/StateMachine"\n    },\n    "extensions": {\n      "type": "object"\n    }\n  },\n  "$defs": {\n    "TokenRef": {\n      "type": "string",\n      "pattern": "^\\\\{[a-zA-Z0-9_.-]+\\\\}$",\n      "description": "Reference to a design token path"\n    },\n    "Condition": {\n      "type": "string",\n      "description": "Boolean expression to guard actions (adapter-defined expression language)."\n    },\n    "EventName": {\n      "type": "string",\n      "description": "Event name (native, semantic, or namespaced). Examples: click, submit, change, input, focus, blur, keydown.Enter, pointerdown, hover, inView.enter, route.enter, custom:yourEvent",\n      "minLength": 1\n    },\n    "EventBinding": {\n      "type": "object",\n      "required": [\n        "event",\n        "actions"\n      ],\n      "properties": {\n        "event": {\n          "$ref": "#/$defs/EventName"\n        },\n        "when": {\n          "$ref": "#/$defs/Condition"\n        },\n        "actions": {\n          "$ref": "#/$defs/ActionList"\n        },\n        "throttleMs": {\n          "type": "number",\n          "minimum": 0\n        },\n        "debounceMs": {\n          "type": "number",\n          "minimum": 0\n        },\n        "preventDefault": {\n          "type": "boolean",\n          "default": false\n        },\n        "stopPropagation": {\n          "type": "boolean",\n          "default": false\n        }\n      },\n      "additionalProperties": false\n    },\n    "KeyboardMap": {\n      "type": "object",\n      "description": "Key combo (e.g., \'Enter\', \'Shift+Tab\', \'Ctrl+K\') to actions mapping.",\n      "additionalProperties": {\n        "$ref": "#/$defs/ActionList"\n      }\n    },\n    "GestureMap": {\n      "type": "object",\n      "description": "Gesture to actions mapping (e.g., swipeLeft, swipeRight, pinch, tap, longPress).",\n      "additionalProperties": {\n        "$ref": "#/$defs/ActionList"\n      }\n    },\n    "ActionList": {\n      "type": "array",\n      "items": {\n        "$ref": "#/$defs/Action"\n      },\n      "default": []\n    },\n    "Action": {\n      "type": "object",\n      "required": [\n        "type"\n      ],\n      "properties": {\n        "type": {\n          "type": "string",\n          "enum": [\n            "navigate",\n            "openModal",\n            "closeModal",\n            "fetch",\n            "mutate",\n            "toast",\n            "copy",\n            "download",\n            "setState",\n            "custom"\n          ]\n        }\n      },\n      "allOf": [\n        {\n          "$ref": "#/$defs/ActionDiscriminator"\n        }\n      ],\n      "additionalProperties": false\n    },\n    "ActionDiscriminator": {\n      "oneOf": [\n        {\n          "$ref": "#/$defs/ActionNavigate"\n        },\n        {\n          "$ref": "#/$defs/ActionOpenModal"\n        },\n        {\n          "$ref": "#/$defs/ActionCloseModal"\n        },\n        {\n          "$ref": "#/$defs/ActionFetch"\n        },\n        {\n          "$ref": "#/$defs/ActionMutate"\n        },\n        {\n          "$ref": "#/$defs/ActionToast"\n        },\n        {\n          "$ref": "#/$defs/ActionCopy"\n        },\n        {\n          "$ref": "#/$defs/ActionDownload"\n        },\n        {\n          "$ref": "#/$defs/ActionSetState"\n        },\n        {\n          "$ref": "#/$defs/ActionCustom"\n        }\n      ]\n    },\n    "ActionNavigate": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "navigate"\n        },\n        "to": {\n          "type": "string"\n        },\n        "replace": {\n          "type": "boolean",\n          "default": false\n        }\n      },\n      "required": [\n        "type",\n        "to"\n      ],\n      "additionalProperties": false\n    },\n    "ActionOpenModal": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "openModal"\n        },\n        "id": {\n          "type": "string"\n        },\n        "props": {\n          "type": "object"\n        }\n      },\n      "required": [\n        "type",\n        "id"\n      ],\n      "additionalProperties": false\n    },\n    "ActionCloseModal": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "closeModal"\n        },\n        "id": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false\n    },\n    "ActionFetch": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "fetch"\n        },\n        "url": {\n          "type": "string"\n        },\n        "method": {\n          "type": "string",\n          "default": "GET"\n        },\n        "headers": {\n          "type": "object"\n        },\n        "body": {},\n        "cache": {\n          "type": "string",\n          "enum": [\n            "default",\n            "no-store",\n            "reload",\n            "no-cache",\n            "force-cache",\n            "only-if-cached"\n          ]\n        },\n        "assign": {\n          "type": "object",\n          "description": "Where to place results (adapter-defined path semantics)"\n        },\n        "onSuccess": {\n          "$ref": "#/$defs/ActionList"\n        },\n        "onError": {\n          "$ref": "#/$defs/ActionList"\n        }\n      },\n      "required": [\n        "type",\n        "url"\n      ],\n      "additionalProperties": false\n    },\n    "ActionMutate": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "mutate"\n        },\n        "endpoint": {\n          "type": "string"\n        },\n        "operation": {\n          "type": "string",\n          "description": "Optional operation name (e.g., GraphQL mutation)"\n        },\n        "variables": {\n          "type": "object"\n        },\n        "headers": {\n          "type": "object"\n        },\n        "onSuccess": {\n          "$ref": "#/$defs/ActionList"\n        },\n        "onError": {\n          "$ref": "#/$defs/ActionList"\n        }\n      },\n      "required": [\n        "type",\n        "endpoint"\n      ],\n      "additionalProperties": false\n    },\n    "ActionToast": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "toast"\n        },\n        "level": {\n          "type": "string",\n          "enum": [\n            "info",\n            "success",\n            "warn",\n            "error"\n          ],\n          "default": "info"\n        },\n        "message": {\n          "oneOf": [\n            {\n              "type": "string"\n            },\n            {\n              "$ref": "#/$defs/TokenRef"\n            }\n          ]\n        },\n        "durationMs": {\n          "type": "number"\n        }\n      },\n      "required": [\n        "type",\n        "message"\n      ],\n      "additionalProperties": false\n    },\n    "ActionCopy": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "copy"\n        },\n        "text": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "type",\n        "text"\n      ],\n      "additionalProperties": false\n    },\n    "ActionDownload": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "download"\n        },\n        "url": {\n          "type": "string"\n        },\n        "filename": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "type",\n        "url"\n      ],\n      "additionalProperties": false\n    },\n    "ActionSetState": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "setState"\n        },\n        "path": {\n          "type": "string",\n          "description": "Adapter-defined state path (e.g., local or global store)"\n        },\n        "value": {}\n      },\n      "required": [\n        "type",\n        "path",\n        "value"\n      ],\n      "additionalProperties": false\n    },\n    "ActionCustom": {\n      "type": "object",\n      "properties": {\n        "type": {\n          "const": "custom"\n        },\n        "name": {\n          "type": "string"\n        },\n        "args": {\n          "type": "object"\n        }\n      },\n      "required": [\n        "type",\n        "name"\n      ],\n      "additionalProperties": false\n    },\n    "StateMachine": {\n      "type": "object",\n      "description": "Optional lightweight state machine to orchestrate complex interactions.",\n      "properties": {\n        "initial": {\n          "type": "string"\n        },\n        "states": {\n          "type": "object",\n          "additionalProperties": {\n            "type": "object",\n            "properties": {\n              "on": {\n                "type": "object",\n                "additionalProperties": {\n                  "$ref": "#/$defs/ActionList"\n                }\n              }\n            },\n            "additionalProperties": false\n          }\n        }\n      },\n      "additionalProperties": false\n    }\n  },\n  "additionalProperties": false\n}\n'})})]})}function l(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function a(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);